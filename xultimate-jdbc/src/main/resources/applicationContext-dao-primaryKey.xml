<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
		
	<!-- 创建数据源 -->
	<!-- 使用JBoss、WebLogic时使用应用服务器本身提供的数据源。
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/bbt" />
	 -->
	<!-- 导入数据源相关属性信息-->
	<util:properties id="dataSourcesProperties" location="classpath:/databases.properties" />
	<util:list id="encryptPropertyPlaceholderConfigurerLocalArray">
		<ref bean="dataSourcesProperties"/>
	</util:list>
	<bean parent="encryptPropertyPlaceholderConfigurer" p:propertiesArray-ref="encryptPropertyPlaceholderConfigurerLocalArray" p:decryptor-ref="stringStringAESCryptor" >
		<property name="encryptPropertyNames">
			<array>
				<value>datasource.primaryKey.1.jdbc.username</value>
				<value>datasource.primaryKey.1.jdbc.password</value>
				<value>datasource.primaryKey.2.jdbc.username</value>
				<value>datasource.primaryKey.2.jdbc.password</value>
			</array>
		</property>
	</bean>
	
	<!-- 
		slowSqlMillis：定义慢SQL的标准
		logSlowSql：慢SQL记录
		mergeSql：SQL合并配置
	 -->
	<bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter" p:logSlowSql="true" p:mergeSql="true" p:slowSqlMillis="1000" />
	<!-- 
		logViolation：怀疑攻击的SQL记录到日志
		throwException：怀疑攻击的SQL抛异常
	 -->
	<bean id="wallFilter" class="com.alibaba.druid.wall.WallFilter" p:dbType="mysql" p:logViolation="true" p:throwException="false" />
	<!-- 
		statementExecutableSqlLogEnable：记录所有可执行的SQL
	 -->
	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter" p:statementExecutableSqlLogEnable="true" />
	<bean id="abstractDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   	    
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	 
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <!-- 定期将监控数据输出到日志中 -->
	    <property name="timeBetweenLogStatsMillis" value="300000" />
	    
	    <!-- 当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接。 -->
	    <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
    	<property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
    	<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
	    
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小。如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
	    <property name="poolPreparedStatements" value="false" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    
	    <!-- 配置监控统计拦截的filters -->
	    <property name="proxyFilters">
	        <list>
	        	<!-- <ref bean="wallFilter"/> -->
	            <ref bean="statFilter" />
	            <!-- <ref bean="logFilter" /> -->
	        </list>
	    </property>
	    <!-- 合并多个DruidDataSource的监控数据，无汗和timeBetweenLogStatsMillis共用 -->
	    <property name="useGloalDataSourceStat" value="false" />
	</bean>
	
	<bean id="primaryKey1DataSource" parent="abstractDataSource"
		p:url="${datasource.primaryKey.1.jdbc.url}"
		p:username="${datasource.primaryKey.1.jdbc.username}"
		p:password="${datasource.primaryKey.1.jdbc.password}"> 
	    <!-- 配置最大 -->
	    <property name="maxActive" value="${datasource.primaryKey.1.pool.maxActive}" />
	    <!-- 配置初始化大小、最小 -->
	    <property name="initialSize" value="${datasource.primaryKey.1.pool.minIdle}" />
	    <property name="minIdle" value="${datasource.primaryKey.1.pool.minIdle}" />
	</bean>
	
	<bean id="primaryKey2DataSource" parent="abstractDataSource"
		p:url="${datasource.primaryKey.2.jdbc.url}"
		p:username="${datasource.primaryKey.2.jdbc.username}"
		p:password="${datasource.primaryKey.2.jdbc.password}"> 	    
	    <!-- 配置最大 -->
	    <property name="maxActive" value="${datasource.primaryKey.2.pool.maxActive}" />
	    <!-- 配置初始化大小、最小 -->
	    <property name="initialSize" value="${datasource.primaryKey.2.pool.minIdle}" />
	    <property name="minIdle" value="${datasource.primaryKey.2.pool.minIdle}" />
	</bean>
	
	<jdbc:initialize-database enabled="true" data-source="primaryKey1DataSource">
		<jdbc:script separator=";" execution="INIT" location="classpath:primary_key_1_init.sql"/>
		<jdbc:script separator=";" execution="DESTROY" location="classpath:primary_key_1_destroy.sql"/>
	</jdbc:initialize-database>
	
	<jdbc:initialize-database enabled="true" data-source="primaryKey2DataSource">
		<jdbc:script separator=";" execution="INIT" location="classpath:primary_key_2_init.sql"/>
		<jdbc:script separator=";" execution="DESTROY" location="classpath:primary_key_2_destroy.sql"/>
	</jdbc:initialize-database>
	
	<!-- 步进设置为2是因为使用了两个数据源。其中数据源1和数据源2序列的初始值为连续的，如数据源1的初始值为0，数据源的初始值为1。
		 序列的实际步进为step * cacheSize。 
	<bean id="primaryKey1Incrementer" class="org.danielli.xultimate.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer" 
		p:step="2" p:cacheSize="100" p:incrementerName="primary_key_sequence_1" p:dataSource-ref="primaryKeyDataSource" />
	<bean id="primaryKey2Incrementer" class="org.danielli.xultimate.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer" 
		p:step="2" p:cacheSize="100" p:incrementerName="primary_key_sequence_2" p:dataSource-ref="primaryKeyDataSource" />
	-->
	
	<!-- 步进设置为2是因为使用了两个数据源。其中数据源1和数据源2表中的初始值为连续的，如数据源1表中的初始值为0，数据源2表中的初始值为1。 -->
	<bean id="primaryKey1Incrementer" class="org.danielli.xultimate.jdbc.support.incrementer.MySQLMaxValueIncrementer" 
		p:step="2" p:cacheSize="100" p:incrementerName="primary_key_table_1" p:columnName="next_id" p:dataSource-ref="primaryKey1DataSource" />
	<bean id="primaryKey2Incrementer" class="org.danielli.xultimate.jdbc.support.incrementer.MySQLMaxValueIncrementer" 
		p:step="2" p:cacheSize="100" p:incrementerName="primary_key_table_2" p:columnName="next_id" p:dataSource-ref="primaryKey2DataSource" />
</beans>
